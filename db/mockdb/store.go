// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joelpatel/go-bank/db (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mockdb/store.go github.com/joelpatel/go-bank/db Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/joelpatel/go-bank/db"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccountBalance mocks base method.
func (m *MockStore) AddAccountBalance(arg0 context.Context, arg1, arg2 int64) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountBalance indicates an expected call of AddAccountBalance.
func (mr *MockStoreMockRecorder) AddAccountBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBalance", reflect.TypeOf((*MockStore)(nil).AddAccountBalance), arg0, arg1, arg2)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 string, arg2 int64, arg3 string) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1, arg2, arg3)
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(arg0 context.Context, arg1, arg2 int64) (*db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1, arg2)
	ret0, _ := ret[0].(*db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), arg0, arg1, arg2)
}

// CreateTransfer mocks base method.
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1, arg2, arg3 int64) (*db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1, arg2, arg3)
}

// DeleteAccountByID mocks base method.
func (m *MockStore) DeleteAccountByID(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountByID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccountByID indicates an expected call of DeleteAccountByID.
func (mr *MockStoreMockRecorder) DeleteAccountByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountByID", reflect.TypeOf((*MockStore)(nil).DeleteAccountByID), arg0, arg1)
}

// GetAccountByID mocks base method.
func (m *MockStore) GetAccountByID(arg0 context.Context, arg1 int64) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockStoreMockRecorder) GetAccountByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockStore)(nil).GetAccountByID), arg0, arg1)
}

// GetAccountByIDForUpdate mocks base method.
func (m *MockStore) GetAccountByIDForUpdate(arg0 context.Context, arg1 int64) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByIDForUpdate", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByIDForUpdate indicates an expected call of GetAccountByIDForUpdate.
func (mr *MockStoreMockRecorder) GetAccountByIDForUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByIDForUpdate", reflect.TypeOf((*MockStore)(nil).GetAccountByIDForUpdate), arg0, arg1)
}

// GetAccountsByOwner mocks base method.
func (m *MockStore) GetAccountsByOwner(arg0 context.Context, arg1 string) (*[]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByOwner", arg0, arg1)
	ret0, _ := ret[0].(*[]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByOwner indicates an expected call of GetAccountsByOwner.
func (mr *MockStoreMockRecorder) GetAccountsByOwner(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByOwner", reflect.TypeOf((*MockStore)(nil).GetAccountsByOwner), arg0, arg1)
}

// GetEntriesByAccountID mocks base method.
func (m *MockStore) GetEntriesByAccountID(arg0 context.Context, arg1, arg2, arg3 int64) (*[]db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesByAccountID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*[]db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntriesByAccountID indicates an expected call of GetEntriesByAccountID.
func (mr *MockStoreMockRecorder) GetEntriesByAccountID(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesByAccountID", reflect.TypeOf((*MockStore)(nil).GetEntriesByAccountID), arg0, arg1, arg2, arg3)
}

// GetEntryByID mocks base method.
func (m *MockStore) GetEntryByID(arg0 context.Context, arg1 int64) (*db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryByID indicates an expected call of GetEntryByID.
func (mr *MockStoreMockRecorder) GetEntryByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryByID", reflect.TypeOf((*MockStore)(nil).GetEntryByID), arg0, arg1)
}

// GetTransferByID mocks base method.
func (m *MockStore) GetTransferByID(arg0 context.Context, arg1 int64) (*db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferByID indicates an expected call of GetTransferByID.
func (mr *MockStoreMockRecorder) GetTransferByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferByID", reflect.TypeOf((*MockStore)(nil).GetTransferByID), arg0, arg1)
}

// GetTransfersFromTo mocks base method.
func (m *MockStore) GetTransfersFromTo(arg0 context.Context, arg1, arg2, arg3, arg4 int64) (*[]db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersFromTo", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*[]db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersFromTo indicates an expected call of GetTransfersFromTo.
func (mr *MockStoreMockRecorder) GetTransfersFromTo(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersFromTo", reflect.TypeOf((*MockStore)(nil).GetTransfersFromTo), arg0, arg1, arg2, arg3, arg4)
}

// ListAccounts mocks base method.
func (m *MockStore) ListAccounts(arg0 context.Context, arg1 string, arg2, arg3 int64) (*[]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*[]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockStoreMockRecorder) ListAccounts(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockStore)(nil).ListAccounts), arg0, arg1, arg2, arg3)
}

// TransferMoney mocks base method.
func (m *MockStore) TransferMoney(arg0 context.Context, arg1, arg2, arg3 int64) (*db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferMoney", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferMoney indicates an expected call of TransferMoney.
func (mr *MockStoreMockRecorder) TransferMoney(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferMoney", reflect.TypeOf((*MockStore)(nil).TransferMoney), arg0, arg1, arg2, arg3)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(arg0 context.Context, arg1 *db.Account) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), arg0, arg1)
}

// UpdateAccountBalance mocks base method.
func (m *MockStore) UpdateAccountBalance(arg0 context.Context, arg1, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountBalance indicates an expected call of UpdateAccountBalance.
func (mr *MockStoreMockRecorder) UpdateAccountBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalance", reflect.TypeOf((*MockStore)(nil).UpdateAccountBalance), arg0, arg1, arg2)
}

// UpdateAccountOwner mocks base method.
func (m *MockStore) UpdateAccountOwner(arg0 context.Context, arg1 int64, arg2 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountOwner indicates an expected call of UpdateAccountOwner.
func (mr *MockStoreMockRecorder) UpdateAccountOwner(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountOwner", reflect.TypeOf((*MockStore)(nil).UpdateAccountOwner), arg0, arg1, arg2)
}
